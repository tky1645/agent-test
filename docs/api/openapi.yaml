openapi: "3.0.0"
info:
  title: "植物水やり管理API"
  description: "植物の水やりを管理するためのRESTful API"
  version: "1.0.0"

servers:
  - url: "/api/v1"
    description: "API バージョン1"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cognito_id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserSimple:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string

    UserCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    UserUpdateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Plant:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        watering_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true

    PlantOriginal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        image_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PlantCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        image_url:
          type: string
          nullable: true

    PlantUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        image_url:
          type: string
          nullable: true

    WateringRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
        plant_id:
          type: string
          format: uuid
        watered_at:
          type: string
          format: date-time
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    WateringRecordCreate:
      type: object
      required:
        - watered_at
      properties:
        watered_at:
          type: string
          format: date-time
        notes:
          type: string
          nullable: true

    PlantStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        last_watered_at:
          type: string
          format: date-time
          nullable: true
        days_since_last_watering:
          type: number
          format: float
          nullable: true
        previous_watering_interval:
          type: number
          format: float
          nullable: true

security:
  - BearerAuth: []

paths:
  /users:
    get:
      summary: "全ユーザーの一覧を取得"
      tags:
        - users
      security: []
      responses:
        200:
          description: "ユーザーリストを返却"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSimple"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "新しいユーザーを作成"
      tags:
        - users
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        200:
          description: "ユーザーが正常に作成された"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: "特定のユーザーの詳細情報を取得"
      tags:
        - users
      security: []
      responses:
        200:
          description: "ユーザーの詳細情報"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSimple"
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "ユーザーの情報を更新"
      tags:
        - users
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        200:
          description: "ユーザーが正常に更新された"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "ユーザーを削除"
      tags:
        - users
      security: []
      responses:
        200:
          description: "ユーザーが正常に削除された"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /plants:
    get:
      summary: "植物の一覧を取得"
      tags:
        - plants
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - limit
                - offset
              properties:
                limit:
                  type: integer
                offset:
                  type: integer
      responses:
        200:
          description: "植物リストを返却"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plant"
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "新しい植物を登録"
      tags:
        - plants
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        200:
          description: "植物が正常に作成された"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plant"
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /plants/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    patch:
      summary: "植物の水やり日時を更新"
      tags:
        - plants
      security: []
      responses:
        200:
          description: "植物の水やり日時が正常に更新された"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plant"
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "植物が見つからない"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /plants/{plantId}/watering:
    parameters:
      - name: plantId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: "植物の水やり記録を取得"
      tags:
        - watering
      security: []
      responses:
        200:
          description: "水やり記録のリスト"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WateringRecord"
        400:
          description: "無効なリクエスト"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
