openapi: "3.1.0"
info:
  title: "DDD Agent Test API"
  description: "Domain-Driven Design実装のデモンストレーション用API - ユーザーと植物の管理機能を提供"
  version: "1.0.0"

servers:
  - url: "http://localhost:8080"
    description: "開発環境"

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: "エラーメッセージ"
      required:
        - error

    User:
      type: object
      properties:
        id:
          type: integer
          description: "ユーザーID"
        name:
          type: string
          description: "ユーザー名"
      required:
        - id
        - name

    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: "ユーザー名"
      required:
        - name

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: "更新するユーザー名"
      required:
        - name

    UserCreateResponse:
      type: object
      properties:
        message:
          type: string
          description: "作成成功メッセージ"
      required:
        - message

    UserUpdateResponse:
      type: object
      properties:
        message:
          type: string
          description: "更新成功メッセージ"
        id:
          type: string
          description: "更新されたユーザーのID"
      required:
        - message
        - id

    UserDeleteResponse:
      type: object
      properties:
        message:
          type: string
          description: "削除成功メッセージ"
        id:
          type: string
          description: "削除されたユーザーのID"
      required:
        - message
        - id

    Plant:
      type: object
      properties:
        id:
          type: integer
          description: "植物ID"
        name:
          type: string
          description: "植物名"
        watering_date:
          type: string
          format: date-time
          nullable: true
          description: "最後の水やり日時"
        created_at:
          type: string
          format: date-time
          nullable: true
          description: "作成日時"
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: "更新日時"
      required:
        - id
        - name

    PlantCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: "植物名"
      required:
        - name

    PlantListRequest:
      type: object
      properties:
        limit:
          type: integer
          description: "取得する植物の最大数"
        offset:
          type: integer
          description: "取得開始位置のオフセット"
      required:
        - limit
        - offset

paths:
  /ping:
    get:
      summary: "ヘルスチェック"
      description: "APIサーバーの稼働状況を確認"
      tags:
        - health
      responses:
        '200':
          description: "正常稼働"
          content:
            application/json:
              schema:
                type: string
                example: "ping pong"

  /users:
    get:
      summary: "全ユーザー取得"
      description: "システムに登録されている全ユーザーの一覧を取得"
      tags:
        - users
      responses:
        '200':
          description: "ユーザー一覧の取得成功"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: "ユーザー作成"
      description: "新しいユーザーを作成"
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        '200':
          description: "ユーザー作成成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateResponse"
        '400':
          description: "リクエストが無効"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: "ユーザーID"

    get:
      summary: "ユーザー詳細取得"
      description: "指定されたIDのユーザー情報を取得（実装済みだがルートはコメントアウト）"
      tags:
        - users
      responses:
        '200':
          description: "ユーザー情報の取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "IDが無効"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: "ユーザー更新"
      description: "指定されたIDのユーザー名を更新"
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        '200':
          description: "ユーザー更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateResponse"
        '400':
          description: "リクエストが無効またはIDが空"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: "ユーザー削除"
      description: "指定されたIDのユーザーを削除（実装済みだがルートはコメントアウト）"
      tags:
        - users
      responses:
        '200':
          description: "ユーザー削除成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeleteResponse"
        '400':
          description: "IDが無効"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /plants:
    get:
      summary: "植物一覧取得"
      description: "ページネーション付きで植物一覧を取得"
      tags:
        - plants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlantListRequest"
      responses:
        '200':
          description: "植物一覧の取得成功"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plant"
        '400':
          description: "リクエストが無効"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: "植物作成"
      description: "新しい植物を登録"
      tags:
        - plants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlantCreateRequest"
      responses:
        '200':
          description: "植物作成成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plant"
        '400':
          description: "リクエストが無効"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /plants/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: "植物ID"

    patch:
      summary: "植物水やり記録更新"
      description: "指定された植物の水やり日時を現在時刻に更新"
      tags:
        - plants
      responses:
        '200':
          description: "水やり記録更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plant"
        '400':
          description: "IDが無効"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: "植物が見つからない"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
